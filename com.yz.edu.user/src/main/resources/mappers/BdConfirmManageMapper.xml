<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yz.dao.BdConfirmManageMapper" >
  <resultMap id="BaseResultMap" type="com.yz.model.BdConfirmManage" >
    <id column="confirmation_id" property="confirmationId" jdbcType="VARCHAR" />
    <result column="ta_id" property="taId" jdbcType="VARCHAR" />
    <result column="ta_name" property="taName" jdbcType="VARCHAR" />
    <result column="confirm_city" property="confirmCity" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="confirm_name" property="confirmName" jdbcType="VARCHAR" />
    <result column="confirm_address_level" property="confirmAddressLevel" jdbcType="VARCHAR" />
    <result column="required_materials" property="requiredMaterials" jdbcType="VARCHAR" />
    <result column="charge_person" property="chargePerson" jdbcType="VARCHAR" />
    <result column="charge_person_tel" property="chargePersonTel" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="number" property="number" jdbcType="VARCHAR" />
    <result column="available_numbers" property="availableNumbers" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="getConfirmName" resultType="java.util.HashMap" parameterType="com.yz.model.BdConfirmManage">
	 select  cm.confirm_name confirmName from bms.oa_confirmation_management cm LEFT JOIN bms.bd_test_area ta on cm.ta_id=ta.ta_id 	where  cm.is_allow='1' and YEAR(cm.start_time)=YEAR(NOW())
	  <if test="taId != null and taId != ''">
		  and cm.ta_id = #{taId,jdbcType=VARCHAR}
	  </if>
	  <if test="confirmCity != null and confirmCity != ''">
		  and cm.confirm_city = #{confirmCity,jdbcType=VARCHAR}
	  </if>
      <if test="confirmAddressLevel != null and confirmAddressLevel != ''">
          and cm.confirm_address_level = #{confirmAddressLevel,jdbcType=VARCHAR}
      </if>
	  group by confirm_name
  </select>

  <select id="getConfirmManageList" resultMap="BaseResultMap" parameterType="string" >
      select
      cm.confirmation_id,
      cm.confirm_city,
      cm.address,
      cm.confirm_name,
      cm.confirm_address_level,
      cm.required_materials,
      cm.charge_person,
      cm.charge_person_tel,
      DATE_FORMAT(
      cm.`start_time`,
      '%Y-%m-%d %H:%i:%s'
      ) start_time,
      DATE_FORMAT(
      cm.`end_time`,
      '%Y-%m-%d %H:%i:%s'
      ) end_time,
      cm.number,
      cm.available_numbers,
      ta.ta_name
      from bms.oa_confirmation_management cm LEFT JOIN bms.bd_test_area ta on cm.ta_id=ta.ta_id	where cm.is_allow='1' and cm.confirm_name=#{confirmName} and YEAR(cm.start_time)=YEAR(NOW())
      <if test="taId != null and taId != ''">
          and cm.ta_id = #{taId,jdbcType=VARCHAR}
      </if>
      <if test="confirmCity != null and confirmCity != ''">
          and cm.confirm_city = #{confirmCity,jdbcType=VARCHAR}
      </if>
      <if test="confirmAddressLevel != null and confirmAddressLevel != ''">
          and cm.confirm_address_level = #{confirmAddressLevel,jdbcType=VARCHAR}
      </if>
      order by cm.start_time asc
  </select>
  
  <select id="getConfirmCity" resultType="java.util.HashMap" parameterType="com.yz.model.BdConfirmManage">
  		SELECT
		cm.confirm_city confirmCity
		FROM
			bms.oa_confirmation_management cm where  cm.is_allow='1'
		GROUP BY cm.confirm_city
  </select> 
  
  <select id="getTaName" resultType="java.util.HashMap" parameterType="com.yz.model.BdConfirmManage">
  	SELECT
	cm.ta_id taId,
	ta.ta_name taName 
	FROM
		bms.oa_confirmation_management cm
		LEFT JOIN bms.bd_test_area ta ON cm.ta_id = ta.ta_id where  cm.is_allow='1'
	<if test="confirmCity != null and confirmCity != ''">
            and cm.confirm_city = #{confirmCity,jdbcType=VARCHAR}
    </if>
	GROUP BY cm.ta_id
  </select>
  
  <select id="getConfirmLevel" resultType="java.util.HashMap" parameterType="com.yz.model.BdConfirmManage">
  		SELECT
		    cm.`confirm_address_level` confirmAddressLevel
		FROM
			bms.oa_confirmation_management cm where cm.is_allow='1'
      <if test="taId != null and taId != ''">
          and cm.ta_id = #{taId,jdbcType=VARCHAR}
      </if>
      <if test="confirmCity != null and confirmCity != ''">
          and cm.confirm_city = #{confirmCity,jdbcType=VARCHAR}
      </if>
			group by cm.`confirm_address_level`
			order by cm.`confirm_address_level` ASC
  </select>



	<resultMap id="ConfirmInfoMap" type="com.yz.model.BdConfirmStudentInfo">
		<id column="confirm_id" property="confirmId" jdbcType="VARCHAR" />
		<result column="exam_pay_status" property="examPayStatus" jdbcType="VARCHAR" />
		<result column="scene_confirm_status" property="sceneConfirmStatus" jdbcType="VARCHAR" />
		<result column="scene_remark" property="sceneRemark" jdbcType="VARCHAR" />
		<result column="std_name" property="stdName" jdbcType="VARCHAR" />
		<result column="id_card" property="idCard" jdbcType="VARCHAR" />
		<result column="ta_name" property="taName" jdbcType="VARCHAR" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="register_no" property="registerNo" jdbcType="VARCHAR" />
		<result column="exam_no" property="examNo" jdbcType="VARCHAR" />
		<result column="unvs_name" property="unvsName" jdbcType="VARCHAR" />
		<result column="pfsn_name" property="pfsnName" jdbcType="VARCHAR" />
		<result column="pfsn_level" property="pfsnLevel" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="emp_name" property="recruit" jdbcType="VARCHAR" />
		<result column="emp_status" property="empStatus" jdbcType="VARCHAR" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="update_user_id" property="updateUserId" jdbcType="VARCHAR" />
        <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
        <result column="sign_status" property="signStatus" jdbcType="INTEGER" />
        <result column="sign_user_id" property="signUserId" jdbcType="VARCHAR" />
        <result column="web_register_status" property="webRegisterStatus" jdbcType="INTEGER" />
        <result column="learn_id" property="learnId" jdbcType="VARCHAR" />
        <result column="std_id" property="stdId" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="pic_collect_status" property="picCollectStatus" jdbcType="VARCHAR" />
        <result column="mobile_bind_status" property="mobileBindStatus" jdbcType="VARCHAR" />
	</resultMap>

	<select id="getConfirmInfo" resultMap="ConfirmInfoMap" parameterType="string">
		 SELECT
		a.confirm_id,
		a.exam_pay_status,
        a.web_register_status,
        IFNULL(a.pic_collect_status,0) pic_collect_status,
        IFNULL(a.mobile_bind_status,0) mobile_bind_status,
        IFNULL(a.sign_status,0) sign_status,
		a.scene_confirm_status,
        a.scene_remark,
        DATE_FORMAT(
		    a.update_time,
		    '%Y-%m-%d %H:%i:%s'
		  ) update_time,
        a.update_user_id,
        a.update_user,
        c.std_name,
        c.id_card,
        d.ta_name,
        i.username,
        i.register_no,
        i.password,
        h.exam_no,
        m.unvs_name,
        n.pfsn_name,
		n.pfsn_level,
        f.mobile,
		f.emp_name,
        f.emp_status
        FROM
        bms.bd_student_scene_confirm a
        LEFT JOIN bms.bd_learn_info b ON a.learn_id = b.learn_id
        LEFT JOIN bms.bd_student_info c ON b.std_id = c.std_id
        LEFT JOIN bms.bd_test_area d ON b.ta_id = d.ta_id
        LEFT JOIN bms.bd_learn_rules e ON a.learn_id = e.learn_id
        LEFT JOIN bms.oa_employee f ON e.recruit = f.emp_id
        LEFT JOIN bms.bd_test_prove_info h ON a.learn_id = h.learn_id
        LEFT JOIN bms.bd_student_scene_register i ON  (i.register_status='1' and i.learn_id = a.learn_id)
        LEFT JOIN bms.bd_university m ON  b.unvs_id = m.unvs_id
        LEFT JOIN bms.bd_unvs_profession n ON b.pfsn_id = n.pfsn_id
        WHERE 1=1 and (c.std_name=#{searchInfo} or c.id_card=#{searchInfo})
        <if test="city_code!=null and city_code!=''">
            and d.city_code = #{city_code,jdbcType=VARCHAR}
        </if>
	</select>

	<select id="getCityCodeByUserId" parameterType="java.lang.String" resultType="java.util.HashMap">
		select
			  bu.`user_id`,
			  bu.`user_name`,
			  acad.`attr_value` city_code
			from
			  bms.`bms_user` bu
			  LEFT JOIN common.`ats_customize_attr` acad
			  ON acad.`ref_handler` = bu.`user_id` AND acad.`ref_type`='NetWorkExam'
			  AND acad.`attr_name`='signAddr'
			where
	  		bu.module='2' and  bu.user_id=#{userId}
	  		GROUP BY bu.`user_id` limit 1
	</select>

    <select id="existExamNo" resultMap="ConfirmInfoMap" parameterType="java.lang.String">
            SELECT
            b.exam_no ,
            a.learn_id,
            IFNULL(a.sign_status,0) sign_status,
            c.std_id
        FROM
            bms.bd_student_scene_confirm a
            LEFT JOIN bms.bd_test_prove_info b ON a.learn_id = b.learn_id
            LEFT JOIN bms.bd_learn_info c ON a.learn_id = c.learn_id
        WHERE
            a.confirm_id = #{confirmId}
            LIMIT 1
    </select>

    <insert id="insertExamNo">
        INSERT INTO bms.`bd_test_prove_info` (
        `learn_id`,
        `std_id`,
        `exam_no`
        )
        VALUES
        (
        #{learnId},
        #{stdId},
        #{examNo}
        );
    </insert>

    <update id="updateExamNo">
        UPDATE bms.bd_test_prove_info SET exam_no = #{examNo} where
        learn_id = #{learnId}
    </update>

    <update id="confirmSign" parameterType="com.yz.model.BdConfirmStudentInfo">
        update bms.bd_student_scene_confirm
        <set>
            <if test="updateUserId != null and '' != updateUserId">
                update_user_id = #{updateUserId,jdbcType=VARCHAR},
            </if>
            <if test="signUserId != null and '' != signUserId">
                sign_user_id = #{signUserId,jdbcType=VARCHAR},
            </if>
            <if test="updateUser != null and '' != updateUser">
                update_user = #{updateUser},
            </if>
            <if test="sceneRemark != null">
                scene_remark = #{sceneRemark,jdbcType=VARCHAR},
            </if>
            <if test="signStatus != null">
                sign_status = #{signStatus,jdbcType=INTEGER},
            </if>
            <if test="signTime != null and '' != signTime">
                sign_time=#{signTime},
            </if>
            update_time=now()
        </set>
        where confirm_id=#{confirmId}
    </update>

</mapper>