<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yz.dao.BdsLearnMapper">

	<resultMap type="java.util.HashMap" id="StudentInfo">
		<result column="std_ame" property="stdName" jdbcType="VARCHAR" />
		<result column="sex" property="sex" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="id_card" property="idCard" jdbcType="VARCHAR" />
		<association property="learnInfos" column="std_id"
			select="selectLearnInfo" />
		<association property="headUrl" column="std_id" select="selectHeadUrl" />
	</resultMap>

	<resultMap type="java.util.HashMap" id="LearnInfo">
		<result column="pfsn_name" property="pfsnName" jdbcType="VARCHAR" />
		<result column="learn_id" property="learnId" jdbcType="VARCHAR" />
		<result column="std_no" property="stdNo" jdbcType="VARCHAR" />
		<result column="std_id" property="stdId" jdbcType="VARCHAR" />
		<result column="unvs_name" property="unvsName" jdbcType="VARCHAR" />
		<result column="teach_method" property="teachMethod" jdbcType="VARCHAR" />
		<result column="std_stage" property="stdStage" jdbcType="VARCHAR" />
		<result column="grade" property="grade" jdbcType="VARCHAR" />
		<result column="pfsn_level" property="pfsnLevel" jdbcType="VARCHAR" />
		<result column="unvs_id" property="unvsId" jdbcType="VARCHAR" />
		<result column="ta_name" property="taName" jdbcType="VARCHAR" />
		<result column="recruit_type" property="recruitType" jdbcType="VARCHAR" />
		<result column="is_test_completed" property="isTestCompleted" jdbcType="VARCHAR" />
		<result column="scholarship" property="scholarship" jdbcType="VARCHAR" />
		<result column="guide_teacher" property="guideTeacher" jdbcType="VARCHAR" />
		<result column="sg" property="sg" jdbcType="VARCHAR" />
		<result column="is_data_completed" property="isDataCompleted" jdbcType="VARCHAR" />
		<result column="is_data_check" property="isDataCheck" jdbcType="VARCHAR" />
		<result column="annex_status" property="annexStatus" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
	</resultMap>

	<select id="selectRecruitTypeByLearnId" parameterType="java.lang.String"
		resultType="java.lang.String">
		select recruit_type from bms.bd_learn_info where learn_id =
		#{learnId}
	</select>

	<select id="selectLearnIdByUserId" parameterType="java.lang.String"
		resultType="java.lang.String">
		SELECT
		l.learn_id
		FROM
		bms.bd_learn_info l
		LEFT JOIN
		bms.bd_student_info r
		ON r.`std_id` = l.`std_id`
		WHERE r.`user_id` =
		#{userId}
	</select>

	<select id="selectUserIdByLearnId" parameterType="java.lang.String" resultType="java.util.HashMap">
		select
			o.`user_id` as userId,
			o.`std_id` as stdId
		from bms.bd_learn_info l 
			left join bms.bd_student_info o
		on o.`std_id` = l.`std_id`
			where l.learn_id =#{learnId}
	</select>

	<select id="selectTutorAndRecruitUserId" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		select
		o.`user_id` as recruitUserId,
		e.`user_id` as
		tutorUserId
		from
		bms.`bd_learn_rules` r
		left join bms.`oa_employee` o
		on
		o.`emp_id` = r.`recruit`
		left join bms.`oa_employee` e
		on e.`emp_id` =
		r.`tutor`
		where r.`learn_id` = #{learnId}
	</select>

	<select id="selectHeadUrl" parameterType="java.lang.String"
		resultType="java.lang.String">
		select annex_url AS headUrl from bms.bd_student_annex where
		std_id = #{stdId} AND annex_type = '5' limit 0,1
	</select>

	<select id="selectUnpaidCountByItemCode" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		COUNT(1)
		FROM
		bms.bd_sub_order bo
		LEFT JOIN
		bms.bd_student_order bs
		ON bs.`order_no` = bo.`order_no`
		WHERE
		bs.`learn_id` = #{learnId}
		AND bo.`item_code` = #{itemCode}
		AND
		bo.`sub_order_status` = '1'
	</select>

	<select id="selectUnpaidCount" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		COUNT(1)
		FROM
		bms.bd_sub_order bo
		LEFT JOIN
		bms.bd_student_order bs
		ON bs.`order_no` = bo.`order_no`
		WHERE
		bs.`learn_id` = #{learnId}
		and bo.`sub_order_status` = '1'
	</select>

	<select id="selectPaidCount" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		COUNT(1)
		FROM
		bms.bd_sub_order bo
		LEFT JOIN
		bms.bd_student_order bs
		ON bs.`order_no` = bo.`order_no`
		WHERE
		bs.`learn_id` = #{learnId}
		and bo.`sub_order_status` = '2'
	</select>

	<select id="selectStudentInfo" parameterType="java.lang.String"
		resultMap="StudentInfo">
		SELECT
		bsi.`std_id`,
		bsi.`std_name`,
		bsi.`sex`,
		bsi.`mobile`,
		bsi.`id_card`
		FROM
		bms.bd_student_info bsi
		WHERE bsi.`user_id` =
		#{userId} limit 1
	</select>

	<select id="selectLearnInfo" parameterType="java.lang.String"
		resultMap="LearnInfo">
		select
		bli.`learn_id`,
		bli.`school_roll` std_no,
		bu.`unvs_name`,
		bup.`pfsn_name`,
		bu.`unvs_id`,
		bli.`recruit_type`,
		bup.`pfsn_level`,
		bup.`teach_method`,
		bli.`is_test_completed`,
		bli.`grade`,
		bli.`std_stage`,
		ta.ta_name,
		bli.scholarship,
		pa.guide_teacher,
		bli.`sg`,
		bli.`is_data_completed`,
		bli.`annex_status`,
		bli.`is_data_check`,
		date_format(bli.`create_time`,'%Y-%m-%d
		%H:%i:%s') create_time
		from
		bms.bd_learn_info bli
		left join
		bms.bd_university bu
		on bli.`unvs_id` = bu.`unvs_id`
		left join
		bms.bd_unvs_profession bup
		on bup.`pfsn_id` = bli.`pfsn_id`
		left join
		bms.bd_test_area ta
		on ta.ta_id = bli.ta_id
		left join
		bms.oa_student_graduate_paper_task pa
		on pa.learn_id = bli.learn_id
		where bli.`std_id` = #{stdId}
	</select>

	<select id="getLearnList" parameterType="string" resultType="java.util.HashMap">
		select
		l.scholarship,
		l.is_completed as isCompleted,
		l.grade,
		l.std_stage,
		bup.pfsn_level
		from bms.bd_learn_info l
		left join
		bms.bd_unvs_profession bup on
		l.pfsn_id=bup.pfsn_id
		where l.`std_id` =
		#{stdId, jdbcType=VARCHAR}
	</select>

	<select id="countWhiteListBy" resultType="int">
		select
		count(1)
		from
		bms.bd_white_list w
		where w.`std_id` = #{stdId, jdbcType=VARCHAR}
		and
		w.`scholarship` = #{scholarship, jdbcType=VARCHAR}
	</select>

	<select id="getStudentInfoById" resultType="java.util.HashMap"
		parameterType="string">
		select
		s.`std_name` as `name`,
		s.`std_id` as stdId,
		s.`id_type` as idType,
		s.`id_card` as idCard,
		s.`mobile`
		from
		bms.bd_student_info s
		where s.`std_id` = #{stdId, jdbcType=VARCHAR}
	</select>

	<select id="getStudentInfo" resultType="java.util.HashMap">
		select
		s.`std_name` as
		`name`,
		s.`std_id` as stdId
		from
		bms.bd_student_info s
		where s.`id_card` =
		#{certNo, jdbcType=VARCHAR}
		and s.`id_type` = #{certType,
		jdbcType=VARCHAR}
		limit 0, 1
	</select>

	<insert id="addStudentInfo" parameterType="com.yz.model.communi.Body">
		INSERT INTO bms.`bd_student_info` (
		`std_id`,
		`std_name`,
		`id_type`,
		`id_card`,
		`sex`,
		`birthday`,
		`mobile`,
		`std_source`
		)
		VALUES
		(
		#{stdId,
		jdbcType=VARCHAR},
		#{name, jdbcType=VARCHAR},
		#{idType,
		jdbcType=VARCHAR},
		#{idCard, jdbcType=VARCHAR},
		#{sex,
		jdbcType=VARCHAR},
		#{birthday, jdbcType=VARCHAR},
		#{mobile},
		#{stdSource, jdbcType=VARCHAR}
		)
	</insert>

	<insert id="addStudentOther" parameterType="com.yz.model.communi.Body">
		insert into
		bms.`bd_student_other` (`std_id`) values( #{stdId, jdbcType=VARCHAR} )
	</insert>


	<select id="selectFeeInfo" resultType="java.util.HashMap">
		select
		f.`fee_id` as feeId,
		o.`offer_id` as offerId
		from
		bms.bd_fee f
		left join bms.bd_offer o
		on
		o.`offer_id` =
		(select
		pto.offer_id
		from
		bms.bd_pto pto
		left join
		bms.bd_offer r
		on r.offer_id = pto.offer_id
		where pto.`pfsn_id` =
		#{pfsnId, jdbcType=VARCHAR}
		and pto.`ta_id` = #{taId, jdbcType=VARCHAR}
		and pto.`scholarship` = #{scholarship, jdbcType=VARCHAR}
		and r.status =
		'1'
		group by pto.`offer_id`)
		where f.`fee_id` =
		(select
		ptf.fee_id
		from
		bms.bd_ptf ptf
		left join bms.bd_fee e
		on e.fee_id = ptf.fee_id
		where
		ptf.`pfsn_id` = #{pfsnId, jdbcType=VARCHAR}
		and ptf.`ta_id` = #{taId,
		jdbcType=VARCHAR}
		and ptf.`scholarship` = #{scholarship,
		jdbcType=VARCHAR}
		and e.status = '1'
		group by ptf.`fee_id`)
	</select>

	<insert id="addStudentLearnInfo" parameterType="com.yz.model.communi.Body">
		<selectKey keyProperty="learnId" order="BEFORE" resultType="string">
			select seq()
		</selectKey>
		insert into bms.`bd_learn_info` (
		`learn_id`,
		`std_id`,
		`std_type`,
		`unvs_id`,
		`pfsn_id`,
		`ta_id`,
		`scholarship`,
		`recruit_type`,
		`fee_id`,
		`offer_id`,
		`grade`,
		`std_stage`,
		`is_online`,
		`enroll_channel`,
		`sg`
		)
		values
		(
		#{learnId, jdbcType=VARCHAR},
		#{stdId, jdbcType=VARCHAR},
		#{stdType, jdbcType=VARCHAR},
		#{unvsId, jdbcType=VARCHAR},
		#{pfsnId,
		jdbcType=VARCHAR},
		#{taId, jdbcType=VARCHAR},
		#{scholarship,
		jdbcType=VARCHAR},
		#{recruitType, jdbcType=VARCHAR},
		#{feeId,
		jdbcType=VARCHAR},
		#{offerId, jdbcType=VARCHAR},
		#{grade,
		jdbcType=VARCHAR},
		#{stdStage, jdbcType=VARCHAR},
		#{isOnline,
		jdbcType=VARCHAR},
		#{enrollChannel, jdbcType=VARCHAR},
		#{sg,
		jdbcType=VARCHAR}
		)
	</insert>

	<insert id="addStudentHistory" parameterType="com.yz.model.communi.Body">
		insert into
		bms.`bd_student_history` (`learn_id`, `std_id`)
		values (#{learnId,
		jdbcType=VARCHAR}, #{stdId, jdbcType=VARCHAR})
	</insert>

	<insert id="addStudentEnroll" parameterType="com.yz.model.communi.Body">
		insert into
		bms.`bd_student_enroll` (
		`learn_id`,
		`std_id`,
		`scholarship`,
		`pfsn_level`,
		`grade`,
		`unvs_id`,
		`pfsn_id`,
		`ta_id`,
		`points`,
		`bp_type`
		)
		values
		(
		#{learnId, jdbcType=VARCHAR},
		#{stdId, jdbcType=VARCHAR},
		#{scholarship, jdbcType=VARCHAR},
		#{pfsnLevel, jdbcType=VARCHAR},
		#{grade, jdbcType=VARCHAR},
		#{unvsId, jdbcType=VARCHAR},
		#{pfsnId,
		jdbcType=VARCHAR},
		#{taId, jdbcType=VARCHAR},
		#{points,
		jdbcType=VARCHAR},
		#{bpType, jdbcType=VARCHAR}
		)
	</insert>

	<select id="countGrade" resultType="int">
		select count(1) from
		bms.bd_learn_info where std_id = #{stdId, jdbcType=VARCHAR} and grade
		= #{grade, jdbcType=VARCHAR}  AND std_stage NOT IN('10')
	</select>

	<insert id="insertLearnRemarks">
		insert into
		bms.bd_learn_remark(lr_id,learn_id,remark_type)
		select
		seq(),
		#{learnId},
		dict_value
		from bms.sys_dict where p_id=#{dictId}
	</insert>

	<insert id="insertCheckRecord" parameterType="map">
		insert into bms.bd_check_record
		<trim prefix="(" suffix=")" suffixOverrides=",">
			cr_id,
			<if test="mappingId != null">
				mapping_id,
			</if>
			<if test="checkStatus != null">
				check_status,
			</if>
			<if test="checkOrder != null">
				check_order,
			</if>
			<if test="checkType != null">
				check_type,
			</if>
			<if test="crStatus != null">
				cr_status,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			seq(),
			<if test="mappingId != null">
				#{mappingId,jdbcType=VARCHAR},
			</if>
			<if test="checkStatus != null">
				#{checkStatus,jdbcType=VARCHAR},
			</if>
			<if test="checkOrder != null">
				#{checkOrder,jdbcType=VARCHAR},
			</if>
			<if test="checkType != null">
				#{checkType,jdbcType=VARCHAR},
			</if>
			<if test="crStatus != null">
				#{crStatus,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>

	<select id="selectEmpInfo" parameterType="string" resultType="map">
		SELECT
		e.`emp_id` AS recruit,
		j.`dp_id` AS recruitDpId,
		j.`campus_id` AS
		recruitCampusId,
		c.`emp_id` AS recruitCampusManager,
		j.`group_id`
		FROM
		bms.oa_employee e
		INNER JOIN bms.oa_employee_job j
		ON j.`emp_id` =
		e.`emp_id`
		INNER JOIN bms.oa_campus c
		ON c.`campus_id` = j.`campus_id`
		WHERE e.`emp_id` = #{recruitId, jdbcType=VARCHAR}
		and e.`emp_status` !=
		'2'
	</select>

	<insert id="insertLearnRule" parameterType="java.util.HashMap">
		INSERT INTO
		bms.`bd_learn_rules` (
		`learn_id`,
		`recruit`,
		`recruit_campus_id`,
		`recruit_dp_id`,
		`recruit_group_id`,
		`recruit_campus_manager`
		)
		VALUES
		(
		#{learnId, jdbcType=VARCHAR},
		#{recruit, jdbcType=VARCHAR},
		#{recruitCampusId, jdbcType=VARCHAR},
		#{recruitDpId, jdbcType=VARCHAR},
		#{recruitGroupId, jdbcType=VARCHAR},
		#{recruitCampusManager,
		jdbcType=VARCHAR}
		)
	</insert>

	<select id="getInfoByLearnId" resultType="java.util.Map">
		SELECT
		b.pfsn_name
		FROM
		bms.bd_learn_info a
		LEFT JOIN bms.bd_unvs_profession b ON a.pfsn_id =
		b.pfsn_id
		WHERE
		a.learn_id = #{learnId}
	</select>

	<select id="selectLearnInfoByLearnId" parameterType="java.lang.String"
		resultMap="LearnInfo">
		select
		bli.`learn_id`,
		bli.`std_id`,
		bli.`grade`,
		bli.`school_roll` std_no,
		bu.`unvs_name`,
		bup.`pfsn_name`,
		bu.`unvs_id`,
		bli.`recruit_type`,
		bup.`pfsn_level`,
		bup.`teach_method`,
		bli.`is_test_completed`,
		bli.`grade`,
		bli.`std_stage`,
		ta.ta_name,
		bli.scholarship
		from
		bms.bd_learn_info bli
		left join bms.bd_university bu
		on bli.`unvs_id` = bu.`unvs_id`
		left join bms.bd_unvs_profession bup
		on
		bup.`pfsn_id` = bli.`pfsn_id`
		left join bms.bd_test_area ta
		on ta.ta_id
		= bli.ta_id
		where bli.`learn_id` =
		#{learnId,jdbcType=VARCHAR}
	</select>

	<select id="getPayTimeByLearnId" parameterType="java.lang.String"
		resultType="java.lang.String">
		SELECT
		date_format(bss.`pay_time`,'%Y-%m-%d %H:%i:%s')
		FROM
		bms.`bd_student_order` bso
		LEFT JOIN bms.`bd_student_serial` bss
		ON
		bss.`order_no` = bso.`order_no`
		LEFT JOIN bms.`bd_serial_suborder` bssb
		ON bssb.`serial_no` = bss.`serial_no`
		LEFT JOIN bms.`bd_sub_order` bsob
		ON bsob.`sub_order_no` = bssb.`sub_order_no`
		WHERE bso.`learn_id` =
		#{learnId,jdbcType=VARCHAR}
		AND bss.serial_status IN ('2', '3')
		AND
		bsob.`item_code` = #{itemCode,jdbcType=VARCHAR} limit 1
	</select>
</mapper>