<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yz.dao.AtsAccountMapper">
	<resultMap id="BaseResultMap" type="com.yz.model.AtsAccount">
		<id column="acc_id" property="accId" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="acc_type" property="accType" jdbcType="VARCHAR" />
		<result column="acc_amount" property="accAmount" jdbcType="VARCHAR" />
		<result column="acc_status" property="accStatus" jdbcType="VARCHAR" />
		<result column="thaw_time" property="thawTime" jdbcType="VARCHAR" />
		<result column="frez_time" property="frezTime" jdbcType="VARCHAR" />
		<result column="can_deposit" property="canDeposit" jdbcType="CHAR" />
		<result column="is_visiable" property="isVisiable" jdbcType="CHAR" />
		<result column="std_id" property="stdId" jdbcType="VARCHAR" />
		<result column="emp_id" property="empId" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		acc_id, user_id, acc_type, acc_amount, acc_status, thaw_time, frez_time, can_deposit,
		is_visiable, std_id, emp_id
	</sql>

	<insert id="insertSelective" parameterType="com.yz.model.AtsAccount">
		<selectKey keyProperty="accId" resultType="string" order="BEFORE">
			select seq()
		</selectKey>
		insert into goods.ats_account
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="accId != null">
				acc_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="accType != null">
				acc_type,
			</if>
			<if test="accAmount != null">
				acc_amount,
			</if>
			<if test="accStatus != null">
				acc_status,
			</if>
			<if test="thawTime != null">
				thaw_time,
			</if>
			<if test="frezTime != null">
				frez_time,
			</if>
			<if test="canDeposit != null">
				can_deposit,
			</if>
			<if test="isVisiable != null">
				is_visiable,
			</if>
			<if test="stdId != null">
				std_id,
			</if>
			<if test="empId != null">
				emp_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{accId,jdbcType=VARCHAR},
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="accType != null">
				#{accType,jdbcType=VARCHAR},
			</if>
			<if test="accAmount != null">
				#{accAmount,jdbcType=VARCHAR},
			</if>
			<if test="accStatus != null">
				#{accStatus,jdbcType=VARCHAR},
			</if>
			<if test="thawTime != null">
				#{thawTime,jdbcType=TIMESTAMP},
			</if>
			<if test="frezTime != null">
				#{frezTime,jdbcType=TIMESTAMP},
			</if>
			<if test="canDeposit != null">
				#{canDeposit,jdbcType=CHAR},
			</if>
			<if test="isVisiable != null">
				#{isVisiable,jdbcType=CHAR},
			</if>
			<if test="stdId != null">
				#{stdId,jdbcType=VARCHAR},
			</if>
			<if test="empId != null">
				#{empId,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>

	<update id="updateAccount" parameterType="com.yz.model.AtsAccount">
		update goods.ats_account
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="accType != null">
				acc_type = #{accType,jdbcType=VARCHAR},
			</if>
			<if test="accAmount != null">
				acc_amount = #{accAmount,jdbcType=VARCHAR},
			</if>
			<if test="accStatus != null">
				acc_status = #{accStatus,jdbcType=VARCHAR},
			</if>
			<if test="thawTime != null">
				thaw_time = #{thawTime,jdbcType=TIMESTAMP},
			</if>
			<if test="frezTime != null">
				frez_time = #{frezTime,jdbcType=TIMESTAMP},
			</if>
			<if test="canDeposit != null">
				can_deposit = #{canDeposit,jdbcType=CHAR},
			</if>
			<if test="isVisiable != null">
				is_visiable = #{isVisiable,jdbcType=CHAR},
			</if>
			<if test="stdId != null">
				std_id = #{stdId,jdbcType=VARCHAR},
			</if>
			<if test="empId != null">
				emp_id = #{empId,jdbcType=VARCHAR},
			</if>
		</set>
		where acc_id = #{accId,jdbcType=VARCHAR}
	</update>

	<select id="getAccount" parameterType="com.yz.model.AtsAccount" resultMap="BaseResultMap">
		SELECT
			acc_id,
			user_id,
			acc_type,
			acc_amount,
			acc_status,
			date_format(thaw_time, '%Y-%m-%d %H:%i:%s') as thaw_time,
			date_format(frez_time, '%Y-%m-%d %H:%i:%s') as frez_time,
			can_deposit,
			is_visiable,
			std_id,
			emp_id
		FROM
		goods.ats_account
		<where>
			and acc_type = #{accType, jdbcType=VARCHAR}
			<choose>
				<when test="userId != null and userId != ''">
					and user_id = #{userId, jdbcType=VARCHAR}
				</when>
				<when test="stdId != null and stdId != ''">
					and std_id = #{stdId, jdbcType=VARCHAR}
				</when>
				<otherwise>
					and emp_id = #{empId, jdbcType=VARCHAR}
				</otherwise>
			</choose>
		</where>
		limit 0,1
	</select>

	<insert id="initAccount" parameterType="list">
		INSERT INTO goods.ats_account (
		acc_id,
		user_id,
		acc_type,
		acc_status,
		can_deposit,
		is_visiable,
		std_id,
		emp_id
		)
		VALUES
		<foreach collection="accountList" item="info" separator="," >
			(seq(),
			#{info.userId, jdbcType=VARCHAR},
			#{info.accType, jdbcType=VARCHAR},
			#{info.accStatus,
			jdbcType=VARCHAR},
			#{info.canDeposit, jdbcType=VARCHAR},
			#{info.isVisiable, jdbcType=VARCHAR},
			#{info.stdId, jdbcType=VARCHAR},
			#{info.empId, jdbcType=VARCHAR})
		</foreach>
	</insert>

	<select id="getAccountForUpdate" parameterType="com.yz.model.AtsAccountSerial" resultMap="BaseResultMap">
		SELECT
			a.`acc_id`,
			a.`user_id`,
			a.`acc_type`,
			a.`acc_amount`,
			a.`acc_status`,
			a.`thaw_time`,
			a.`frez_time`,
			a.`can_deposit`,
			a.`is_visiable`,
			a.`std_id`,
			a.`emp_id`
		FROM
		goods.`ats_account` a
		<where>
			<choose>
				<when test="accId != null and accId != ''">
					a.`acc_id` = #{accId, jdbcType=VARCHAR}
				</when>
				<otherwise>
					a.`acc_type` = #{accType, jdbcType=VARCHAR}
					<choose>
						<when  test="userId != null and userId != ''">
							and a.`user_id` = #{userId, jdbcType=VARCHAR}
						</when>
						<otherwise>
							and a.`std_id` = #{stdId, jdbcType=VARCHAR}
						</otherwise>
					</choose>
				</otherwise>
			</choose>
		</where>
		limit 0,1
		for update
	</select>
	
	<resultMap id="AccountMap" type="java.util.HashMap">
		<id column="acc_id" property="accId" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="std_id" property="stdId" jdbcType="VARCHAR" />
		<result column="emp_id" property="empId" jdbcType="VARCHAR" />
		<result column="acc_type" property="accType" jdbcType="VARCHAR" />
		<result column="acc_amount" property="accAmount" jdbcType="VARCHAR" />
		<result column="acc_status" property="accStatus" jdbcType="VARCHAR" />
		<result column="thaw_time" property="thawTime" jdbcType="VARCHAR" />
		<result column="frez_time" property="frezTime" jdbcType="VARCHAR" />
		<result column="can_deposit" property="canDeposit" jdbcType="CHAR" />
	</resultMap>

	<select id="getAccountList" parameterType="string" resultMap="AccountMap">
		SELECT
			acc_id,
			acc_type,
			acc_amount,
			acc_status,
			date_format(thaw_time, '%Y-%m-%d %H:%i:%s') as thaw_time,
			date_format(frez_time, '%Y-%m-%d %H:%i:%s') as frez_time,
			can_deposit,
			is_visiable
		FROM
		goods.ats_account
		where is_visiable = '1'
		and user_id = #{user_id}
	</select>
	
	<select id="getAccountDetail" parameterType="java.util.Map" resultMap="AccountMap">
		SELECT
			acc_id,
			acc_type,
			acc_amount,
			acc_status,
			date_format(thaw_time, '%Y-%m-%d %H:%i:%s') as thaw_time,
			date_format(frez_time, '%Y-%m-%d %H:%i:%s') as frez_time,
			can_deposit,
			is_visiable
		FROM
		goods.ats_account
		<where>
			<choose>
				<when test="accId != null and accId != ''">
					acc_id = #{accId, jdbcType=VARCHAR}
				</when>
				<otherwise>
					user_id = #{userId, jdbcType=VARCHAR}
					and acc_type = #{accType, jdbcType=VARCHAR}
				</otherwise>
			</choose>
			<if test="isVisiable != null and isVisiable != ''">
				and is_visiable = #{isVisiable, jdbcType=VARCHAR}
			</if>
		</where>
	</select>
	
	<delete id="deleteAccount" parameterType="string">
		delete from goods.ats_account where acc_id = #{accId, jdbcType=VARCHAR}
	</delete>
	
	<update id="updateStdAccount" >
		UPDATE goods.ats_account a SET a.`user_id` = #{userId, jdbcType=VARCHAR} WHERE a.`std_id` = #{stdId, jdbcType=VARCHAR}
	</update>



	<resultMap id="atsAwardRecord" type="com.yz.model.AtsAwardRecord">
		<result column="rule_code" property="ruleCode" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="std_id" property="stdId" jdbcType="VARCHAR" />
		<result column="emp_id" property="empId" jdbcType="VARCHAR" />
		<result column="trigger_user_id" property="triggerUserId" jdbcType="VARCHAR" />
		<result column="zhimi_count" property="zhimiCount" jdbcType="VARCHAR" />
		<result column="award_desc" property="awardDesc" jdbcType="VARCHAR" />
		<result column="mapping_id" property="mappingId" jdbcType="VARCHAR" />
		<result column="rule_type" property="ruleType" jdbcType="VARCHAR" />
	</resultMap>

	<select id="selectZmRepairList" resultMap="atsAwardRecord">
		select tzr.rule_code,tzr.user_id,tzr.std_id,tzr.emp_id,tzr.award_desc,tzr.zhimi_count,tzr.mapping_id,tzr.trigger_user_id,tzr.rule_type
		from temp_zhimi_repair tzr left join goods.ats_account aa on tzr.user_id=aa.user_id
		where aa.user_id is not null and aa.acc_type='2' and  zhimi_count &gt; 0 and tzr.id &gt; 0 and tzr.id &lt;= 6000
	</select>


</mapper>